****************
module alu16(A,B,C,alu_code,overflow);

/****************************************************
16 bit arithmetic logic unit

parameter:
A.........16-bit A input
B.........16-bit B input
alu_code..5-bit operation to perform
C.........16-bit bit result output
overflow..overflow status (used for signed operations)
****************************************************/
	input [15:0] A,B;
	input [4:0] alu_code;
	output [15:0] C;
	output overflow;

//internal nodes

	wire [15:0] A,B;
	reg [15:0] C;
	reg overflow;
	
always @ (A or B or alu_code) begin

//ARITHMETIC OPERATIONS

if(alu_code[4:3] == 2'b00) begin
	case (alu_code[2:0])
		3'b000:C = !((!A + 1) + (!B + 1) + 1);	//signed 2's complement addition
		3'b001:C = A + B;
		3'b010:C = !((!A + 1) - (!B + 1) + 1);	//signed 2's complement subtraction
		3'b011:C = A - B;
		3'b100:C = A + 1;
		3'b101:C = A - 1;
		default:C = 8'bx;
	endcase
		overflow = C[15]^C[14];
	end

//LOGIC OPERATIONS

else if(alu_code[4:3] == 2'b01) begin
	case (alu_code[2:0])
		3'b000:C = A && B;
		3'b001:C = A || B;
		3'b010:C = ((!A)&&(B) || (A)&&(!B));
		3'b000:C = !A;
		default:C = 8'bx;
	endcase
	end

//SHIFT OPERATIONS (<< >> are logical shifts, <<< >>> are arithmetic
shifts in Verilog2001 and SystemVerilog)

else if (alu_code[4:3] == 2'b10) begin
	case (alu_code[2:0])
		3'b000:
		if(B[3:0] == 4'b0000) A << 0;
		else if(B[3:0] == 4'b0001) A << 1;
		else if(B[3:0] == 4'b0010) A << 2;
		else if(B[3:0] == 4'b0011) A << 3;
		else if(B[3:0] == 4'b0100) A << 4;
		else if(B[3:0] == 4'b0101) A << 5;
		else if(B[3:0] == 4'b0110) A << 6;
		else if(B[3:0] == 4'b0111) A << 7;
		else if(B[3:0] == 4'b1000) A << 8;
		else if(B[3:0] == 4'b1001) A << 9;
		else if(B[3:0] == 4'b1010) A << 10;
		else if(B[3:0] == 4'b1011) A << 11;
		else if(B[3:0] == 4'b1100) A << 12;
		else if(B[3:0] == 4'b1101) A << 13;
		else if(B[3:0] == 4'b1110) A << 14;
		else if(B[3:0] == 4'b1111) A << 15;
		3'b001:
		if(B[3:0] == 4'b0000) A >> 0;
		else if(B[3:0] == 4'b0001) A >> 1;
		else if(B[3:0] == 4'b0010) A >> 2;
		else if(B[3:0] == 4'b0011) A >> 3;
		else if(B[3:0] == 4'b0100) A >> 4;
		else if(B[3:0] == 4'b0101) A >> 5;
		else if(B[3:0] == 4'b0110) A >> 6;
		else if(B[3:0] == 4'b0111) A >> 7;
		else if(B[3:0] == 4'b1000) A >> 8;
		else if(B[3:0] == 4'b1001) A >> 9;
		else if(B[3:0] == 4'b1010) A >> 10;
		else if(B[3:0] == 4'b1011) A >> 11;
		else if(B[3:0] == 4'b1100) A >> 12;
		else if(B[3:0] == 4'b1101) A >> 13;
		else if(B[3:0] == 4'b1110) A >> 14;
		else if(B[3:0] == 4'b1111) A >> 15;
		3'b010:
		if(B[3:0] == 4'b0000) A <<< 0;
		else if(B[3:0] == 4'b0001) A <<< 1;
		else if(B[3:0] == 4'b0010) A <<< 2;
		else if(B[3:0] == 4'b0011) A <<< 3;
		else if(B[3:0] == 4'b0100) A <<< 4;
		else if(B[3:0] == 4'b0101) A <<< 5;
		else if(B[3:0] == 4'b0110) A <<< 6;
		else if(B[3:0] == 4'b0111) A <<< 7;
		else if(B[3:0] == 4'b1000) A <<< 8;
		else if(B[3:0] == 4'b1001) A <<< 9;
		else if(B[3:0] == 4'b1010) A <<< 10;
		else if(B[3:0] == 4'b1011) A <<< 11;
		else if(B[3:0] == 4'b1100) A <<< 12;
		else if(B[3:0] == 4'b1101) A <<< 13;
		else if(B[3:0] == 4'b1110) A <<< 14;
		else if(B[3:0] == 4'b1111) A <<< 15;
		3'b000:
		if(B[3:0] == 4'b0000) A >>> 0;
		else if(B[3:0] == 4'b0001) A >>> 1;
		else if(B[3:0] == 4'b0010) A >>> 2;
		else if(B[3:0] == 4'b0011) A >>> 3;
		else if(B[3:0] == 4'b0100) A >>> 4;
		else if(B[3:0] == 4'b0101) A >>> 5;
		else if(B[3:0] == 4'b0110) A >>> 6;
		else if(B[3:0] == 4'b0111) A >>> 7;
		else if(B[3:0] == 4'b1000) A >>> 8;
		else if(B[3:0] == 4'b1001) A >>> 9;
		else if(B[3:0] == 4'b1010) A >>> 10;
		else if(B[3:0] == 4'b1011) A >>> 11;
		else if(B[3:0] == 4'b1100) A >>> 12;
		else if(B[3:0] == 4'b1101) A >>> 13;
		else if(B[3:0] == 4'b1110) A >>> 14;
		else if(B[3:0] == 4'b1111) A >>> 15;
	endcase
	end
end

//SET CONDITION OPERATIONS
endmodule














module alu(a,b,cin,alu,carry,zero,ctl);

&nbspinput [3:0] a,b;         // port A,B
&nbspinput &nbspcin ;             // carry input from carry flag register
&nbspoutput [3:0] alu;        // the result
&nbspoutput carry;            // carry output
&nbspoutput zero ;            // zero output
&nbspinput [3:0] ctl ;        // functionality control for ALU
&nbspwire [4:0] result;       // ALU result

&nbspassign result = alu_out(a,b,cin,ctl);
&nbspassign alu    = result[3:0];
&nbspassign carry  = result[4] ;
&nbspassign zero   = z_flag(result) ;

&nbspfunction [4:0] alu_out;
  &nbspinput  [3:0] a,b ;
  &nbspinput       &nbspcin ;
  &nbspinput  [3:0] ctl ;
  &nbspcase ( ctl )
      &nbsp4'b0000: alu_out=b;                  // select data on port B
      &nbsp4'b0001: alu_out=b+4'b0001 ;         // increment data on port B
      &nbsp4'b0010: alu_out=b-4'b0001 ;         // decrement data on port B
      &nbsp4'b0011: alu_out=a+b;                // ADD without CARRY
      &nbsp4'b0100: alu_out=a+b+cin;            // ADD with CARRY
      &nbsp4'b0101: alu_out=a-b ;               // SUB without BORROW
      &nbsp4'b0110: alu_out=a-b+(~cin);         // SUB with BORROW
      &nbsp4'b0111: alu_out=a&b;                // AND
      &nbsp4'b1000: alu_out=a|b;                // OR
      &nbsp4'b1001: alu_out=a^b;                // EXOR
      &nbsp4'b1010: alu_out={b[3:0],1'b0};      // Shift Left
      &nbsp4'b1011: alu_out={b[0],1'b0,b[3:1]}; // Shift Right
      &nbsp4'b1100: alu_out={b[3:0],cin};       // Rotate Left
      &nbsp4'b1101: alu_out={b[0],cin,b[3:1]};  // Rotate Right
        &nbspdefault : begin
                    &nbspalu_out=9'bxxxxxxxxx;
                       $display("Illegal CTL detected!!");
                  &nbspend    
    &nbspendcase  /* {...,...,...} is for the concatenation.
                 {ADD_WITH_CARRY,SUB_WITH_BORROW}==2'b11 is used
                &nbspto force the CARRY==1 for the increment operation */  
  &nbspendfunction // end of function "result"

  function z_flag ;
  input [4:0] a4 ;
    begin
      z_flag = ^(a4[0]|a4[1]|a4[2]|a4[3]) ; // zero flag check for a4
    end
  endfunction

endmodule









http://www.vlsibank.com/sessionspage.asp?titl_id=4640




























http://www-scf.usc.edu/~ee577/tutorial/verilog/
















The controller has two inputs: the 4-bit opcode and the 1-bit branch outcome from the branch logic.









